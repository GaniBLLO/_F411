
Nucleo_F411_Cmsis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800062c  08000634  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800062c  0800062c  00010634  2**0
                  CONTENTS
  4 .ARM          00000000  0800062c  0800062c  00010634  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800062c  08000634  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800062c  0800062c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000630  08000630  00010630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000634  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000634  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010634  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010664  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ab5  00000000  00000000  000106a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000353  00000000  00000000  0001115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000114b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000075  00000000  00000000  00011568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dffe  00000000  00000000  000115dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016c1  00000000  00000000  0001f5db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00050651  00000000  00000000  00020c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000130  00000000  00000000  000712f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00071420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000614 	.word	0x08000614

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000614 	.word	0x08000614

080001d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <SystemInit+0x20>)
 80001de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001e2:	4a05      	ldr	r2, [pc, #20]	; (80001f8 <SystemInit+0x20>)
 80001e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <RCC_Init>:
 *  Created on: Oct 26, 2024
 *      Author: ganibllo
 */
#include "RCC_F411.h"

void RCC_Init(void){
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0

	//Enable internal High-speed clock
	RCC->CR |= RCC_CR_HSION;
 8000200:	4b76      	ldr	r3, [pc, #472]	; (80003dc <RCC_Init+0x1e0>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a75      	ldr	r2, [pc, #468]	; (80003dc <RCC_Init+0x1e0>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6013      	str	r3, [r2, #0]

	//w8 enabling
	while(!(RCC->CR & RCC_CR_HSIRDY));
 800020c:	bf00      	nop
 800020e:	4b73      	ldr	r3, [pc, #460]	; (80003dc <RCC_Init+0x1e0>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f003 0302 	and.w	r3, r3, #2
 8000216:	2b00      	cmp	r3, #0
 8000218:	d0f9      	beq.n	800020e <RCC_Init+0x12>

	FLASH->ACR |= FLASH_ACR_PRFTEN;
 800021a:	4b71      	ldr	r3, [pc, #452]	; (80003e0 <RCC_Init+0x1e4>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a70      	ldr	r2, [pc, #448]	; (80003e0 <RCC_Init+0x1e4>)
 8000220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000224:	6013      	str	r3, [r2, #0]

	// Flash 2 wait state
	FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000226:	4b6e      	ldr	r3, [pc, #440]	; (80003e0 <RCC_Init+0x1e4>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a6d      	ldr	r2, [pc, #436]	; (80003e0 <RCC_Init+0x1e4>)
 800022c:	f023 0307 	bic.w	r3, r3, #7
 8000230:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_3WS;
 8000232:	4b6b      	ldr	r3, [pc, #428]	; (80003e0 <RCC_Init+0x1e4>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a6a      	ldr	r2, [pc, #424]	; (80003e0 <RCC_Init+0x1e4>)
 8000238:	f043 0303 	orr.w	r3, r3, #3
 800023c:	6013      	str	r3, [r2, #0]

	//Dis. external osc.
	RCC->CR &= ~RCC_CR_HSEON;
 800023e:	4b67      	ldr	r3, [pc, #412]	; (80003dc <RCC_Init+0x1e0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a66      	ldr	r2, [pc, #408]	; (80003dc <RCC_Init+0x1e0>)
 8000244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000248:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~RCC_CR_HSEBYP;
 800024a:	4b64      	ldr	r3, [pc, #400]	; (80003dc <RCC_Init+0x1e0>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a63      	ldr	r2, [pc, #396]	; (80003dc <RCC_Init+0x1e0>)
 8000250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000254:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~RCC_CR_CSSON;
 8000256:	4b61      	ldr	r3, [pc, #388]	; (80003dc <RCC_Init+0x1e0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a60      	ldr	r2, [pc, #384]	; (80003dc <RCC_Init+0x1e0>)
 800025c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000260:	6013      	str	r3, [r2, #0]

	//Clear bits for PLL
	RCC->CR &= ~RCC_CR_PLLON;
 8000262:	4b5e      	ldr	r3, [pc, #376]	; (80003dc <RCC_Init+0x1e0>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a5d      	ldr	r2, [pc, #372]	; (80003dc <RCC_Init+0x1e0>)
 8000268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800026c:	6013      	str	r3, [r2, #0]
	RCC->CR &= ~RCC_CR_PLLI2SON;
 800026e:	4b5b      	ldr	r3, [pc, #364]	; (80003dc <RCC_Init+0x1e0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a5a      	ldr	r2, [pc, #360]	; (80003dc <RCC_Init+0x1e0>)
 8000274:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000278:	6013      	str	r3, [r2, #0]

	//Dis.PLL for settings
	RCC->CR &= ~RCC_CR_PLLON;
 800027a:	4b58      	ldr	r3, [pc, #352]	; (80003dc <RCC_Init+0x1e0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a57      	ldr	r2, [pc, #348]	; (80003dc <RCC_Init+0x1e0>)
 8000280:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000284:	6013      	str	r3, [r2, #0]

	//Clear "/M" then make it /8
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM;
 8000286:	4b55      	ldr	r3, [pc, #340]	; (80003dc <RCC_Init+0x1e0>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	4a54      	ldr	r2, [pc, #336]	; (80003dc <RCC_Init+0x1e0>)
 800028c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000290:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_3;
 8000292:	4b52      	ldr	r3, [pc, #328]	; (80003dc <RCC_Init+0x1e0>)
 8000294:	685b      	ldr	r3, [r3, #4]
 8000296:	4a51      	ldr	r2, [pc, #324]	; (80003dc <RCC_Init+0x1e0>)
 8000298:	f043 0308 	orr.w	r3, r3, #8
 800029c:	6053      	str	r3, [r2, #4]

	//Clear "*N" then make it *80
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN;
 800029e:	4b4f      	ldr	r3, [pc, #316]	; (80003dc <RCC_Init+0x1e0>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	4a4e      	ldr	r2, [pc, #312]	; (80003dc <RCC_Init+0x1e0>)
 80002a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80002a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002ac:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_1;
 80002ae:	4b4b      	ldr	r3, [pc, #300]	; (80003dc <RCC_Init+0x1e0>)
 80002b0:	685b      	ldr	r3, [r3, #4]
 80002b2:	4a4a      	ldr	r2, [pc, #296]	; (80003dc <RCC_Init+0x1e0>)
 80002b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b8:	6053      	str	r3, [r2, #4]

	//Clear "/p" then make it /2
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
 80002ba:	4b48      	ldr	r3, [pc, #288]	; (80003dc <RCC_Init+0x1e0>)
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	4a47      	ldr	r2, [pc, #284]	; (80003dc <RCC_Init+0x1e0>)
 80002c0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002c4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_1;
 80002c6:	4b45      	ldr	r3, [pc, #276]	; (80003dc <RCC_Init+0x1e0>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	4a44      	ldr	r2, [pc, #272]	; (80003dc <RCC_Init+0x1e0>)
 80002cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002d0:	6053      	str	r3, [r2, #4]

	//Choose HSI in "PLL Source MUX"
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 80002d2:	4b42      	ldr	r3, [pc, #264]	; (80003dc <RCC_Init+0x1e0>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	4a41      	ldr	r2, [pc, #260]	; (80003dc <RCC_Init+0x1e0>)
 80002d8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002dc:	6053      	str	r3, [r2, #4]

	//Dis.PLL for "USB OTG_FS"
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
 80002de:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <RCC_Init+0x1e0>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <RCC_Init+0x1e0>)
 80002e4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80002e8:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLQ_2;
 80002ea:	4b3c      	ldr	r3, [pc, #240]	; (80003dc <RCC_Init+0x1e0>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	4a3b      	ldr	r2, [pc, #236]	; (80003dc <RCC_Init+0x1e0>)
 80002f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002f4:	6053      	str	r3, [r2, #4]

	//Enable "MAIN PLL" and w8 enabling
	RCC->CR |= RCC_CR_PLLON;
 80002f6:	4b39      	ldr	r3, [pc, #228]	; (80003dc <RCC_Init+0x1e0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a38      	ldr	r2, [pc, #224]	; (80003dc <RCC_Init+0x1e0>)
 80002fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000300:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLON));
 8000302:	bf00      	nop
 8000304:	4b35      	ldr	r3, [pc, #212]	; (80003dc <RCC_Init+0x1e0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f9      	beq.n	8000304 <RCC_Init+0x108>

	//"System clock MUX"
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000310:	4b32      	ldr	r3, [pc, #200]	; (80003dc <RCC_Init+0x1e0>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a31      	ldr	r2, [pc, #196]	; (80003dc <RCC_Init+0x1e0>)
 8000316:	f023 0303 	bic.w	r3, r3, #3
 800031a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_1;
 800031c:	4b2f      	ldr	r3, [pc, #188]	; (80003dc <RCC_Init+0x1e0>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	4a2e      	ldr	r2, [pc, #184]	; (80003dc <RCC_Init+0x1e0>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 8000328:	bf00      	nop
 800032a:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <RCC_Init+0x1e0>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	f003 030c 	and.w	r3, r3, #12
 8000332:	2b08      	cmp	r3, #8
 8000334:	d1f9      	bne.n	800032a <RCC_Init+0x12e>

	//AHB "/x " then "/1"
	RCC->CFGR &= ~RCC_CFGR_HPRE;
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <RCC_Init+0x1e0>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4a28      	ldr	r2, [pc, #160]	; (80003dc <RCC_Init+0x1e0>)
 800033c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000340:	6093      	str	r3, [r2, #8]

	//APB1 = /2
	RCC->CFGR &= ~RCC_CFGR_PPRE1;
 8000342:	4b26      	ldr	r3, [pc, #152]	; (80003dc <RCC_Init+0x1e0>)
 8000344:	689b      	ldr	r3, [r3, #8]
 8000346:	4a25      	ldr	r2, [pc, #148]	; (80003dc <RCC_Init+0x1e0>)
 8000348:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800034c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <RCC_Init+0x1e0>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	4a22      	ldr	r2, [pc, #136]	; (80003dc <RCC_Init+0x1e0>)
 8000354:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000358:	6093      	str	r3, [r2, #8]
	//APB2 = /1
	RCC->CFGR &= ~RCC_CFGR_PPRE2;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <RCC_Init+0x1e0>)
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	4a1f      	ldr	r2, [pc, #124]	; (80003dc <RCC_Init+0x1e0>)
 8000360:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000364:	6093      	str	r3, [r2, #8]

	//No clock for external input signal? need to check
	RCC->CFGR &= ~RCC_CFGR_RTCPRE;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <RCC_Init+0x1e0>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <RCC_Init+0x1e0>)
 800036c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8000370:	6093      	str	r3, [r2, #8]

	//PLL clock selected for external output
	RCC->CFGR &= ~RCC_CFGR_MCO1;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <RCC_Init+0x1e0>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	4a19      	ldr	r2, [pc, #100]	; (80003dc <RCC_Init+0x1e0>)
 8000378:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800037c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_MCO1;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <RCC_Init+0x1e0>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	4a16      	ldr	r2, [pc, #88]	; (80003dc <RCC_Init+0x1e0>)
 8000384:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000388:	6093      	str	r3, [r2, #8]
	//SYSCLK selected for external output
	RCC->CFGR &= ~RCC_CFGR_MCO2;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <RCC_Init+0x1e0>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	4a13      	ldr	r2, [pc, #76]	; (80003dc <RCC_Init+0x1e0>)
 8000390:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000394:	6093      	str	r3, [r2, #8]

	RCC->CFGR &= ~RCC_CFGR_MCO1PRE;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <RCC_Init+0x1e0>)
 8000398:	689b      	ldr	r3, [r3, #8]
 800039a:	4a10      	ldr	r2, [pc, #64]	; (80003dc <RCC_Init+0x1e0>)
 800039c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003a0:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_MCO2PRE;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <RCC_Init+0x1e0>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <RCC_Init+0x1e0>)
 80003a8:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80003ac:	6093      	str	r3, [r2, #8]

	//Enable clk for GPIOs
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <RCC_Init+0x1e0>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <RCC_Init+0x1e0>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <RCC_Init+0x1e0>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a07      	ldr	r2, [pc, #28]	; (80003dc <RCC_Init+0x1e0>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <RCC_Init+0x1e0>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a04      	ldr	r2, [pc, #16]	; (80003dc <RCC_Init+0x1e0>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40023c00 	.word	0x40023c00

080003e4 <Systick_init>:


void Systick_init(void){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	//Dis. count
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <Systick_init+0x7c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <Systick_init+0x7c>)
 80003ee:	f023 0301 	bic.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]

	//interrupt
	SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80003f4:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <Systick_init+0x7c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a19      	ldr	r2, [pc, #100]	; (8000460 <Systick_init+0x7c>)
 80003fa:	f023 0302 	bic.w	r3, r3, #2
 80003fe:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 8000400:	4b17      	ldr	r3, [pc, #92]	; (8000460 <Systick_init+0x7c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a16      	ldr	r2, [pc, #88]	; (8000460 <Systick_init+0x7c>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6013      	str	r3, [r2, #0]

	//Источник синхронизации без делителя
	SysTick->CTRL &= ~SysTick_CTRL_CLKSOURCE_Msk;
 800040c:	4b14      	ldr	r3, [pc, #80]	; (8000460 <Systick_init+0x7c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <Systick_init+0x7c>)
 8000412:	f023 0304 	bic.w	r3, r3, #4
 8000416:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000418:	4b11      	ldr	r3, [pc, #68]	; (8000460 <Systick_init+0x7c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a10      	ldr	r2, [pc, #64]	; (8000460 <Systick_init+0x7c>)
 800041e:	f043 0304 	orr.w	r3, r3, #4
 8000422:	6013      	str	r3, [r2, #0]

	//Count to = 0;
	SysTick->LOAD &= ~SysTick_LOAD_RELOAD_Msk;
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <Systick_init+0x7c>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4a0d      	ldr	r2, [pc, #52]	; (8000460 <Systick_init+0x7c>)
 800042a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800042e:	6053      	str	r3, [r2, #4]
	//Count = 0;
    SysTick->VAL &= ~SysTick_VAL_CURRENT_Msk;
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <Systick_init+0x7c>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <Systick_init+0x7c>)
 8000436:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800043a:	6093      	str	r3, [r2, #8]
    //Count to TimerTick
	SysTick->LOAD = TimerTick;
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <Systick_init+0x7c>)
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <Systick_init+0x80>)
 8000440:	605a      	str	r2, [r3, #4]
	SysTick->VAL = TimerTick;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <Systick_init+0x7c>)
 8000444:	4a07      	ldr	r2, [pc, #28]	; (8000464 <Systick_init+0x80>)
 8000446:	609a      	str	r2, [r3, #8]

	//Enb. count
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <Systick_init+0x7c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <Systick_init+0x7c>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	e000e010 	.word	0xe000e010
 8000464:	0001869f 	.word	0x0001869f

08000468 <GPIO_LCD_Init>:
//    // write to RAM
//    ILI9341_WriteCommand(0x2C); // RAMWR
//}


void GPIO_LCD_Init(void){
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

	//Dis
	GPIOA->ODR = 0x0;
 800046c:	4b3b      	ldr	r3, [pc, #236]	; (800055c <GPIO_LCD_Init+0xf4>)
 800046e:	2200      	movs	r2, #0
 8000470:	615a      	str	r2, [r3, #20]
	GPIOB->ODR = 0x0;
 8000472:	4b3b      	ldr	r3, [pc, #236]	; (8000560 <GPIO_LCD_Init+0xf8>)
 8000474:	2200      	movs	r2, #0
 8000476:	615a      	str	r2, [r3, #20]
	 * Highspeed = |1|1|;
	 * SPI_1 = AF5
	 * MOSI	-> PA7
	 * MISO	-> PA6
	 * SCK	-> PA5*/
	GPIOA->MODER &= ~GPIO_MODER_MODER7;
 8000478:	4b38      	ldr	r3, [pc, #224]	; (800055c <GPIO_LCD_Init+0xf4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a37      	ldr	r2, [pc, #220]	; (800055c <GPIO_LCD_Init+0xf4>)
 800047e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000482:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_1;
 8000484:	4b35      	ldr	r3, [pc, #212]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a34      	ldr	r2, [pc, #208]	; (800055c <GPIO_LCD_Init+0xf4>)
 800048a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800048e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED7;
 8000490:	4b32      	ldr	r3, [pc, #200]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a31      	ldr	r2, [pc, #196]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000496:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800049a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED7;
 800049c:	4b2f      	ldr	r3, [pc, #188]	; (800055c <GPIO_LCD_Init+0xf4>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a2e      	ldr	r2, [pc, #184]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004a6:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL7;
 80004a8:	4b2c      	ldr	r3, [pc, #176]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004aa:	6a1b      	ldr	r3, [r3, #32]
 80004ac:	4a2b      	ldr	r2, [pc, #172]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80004b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (GPIO_AFRL_AFSEL7_2 | GPIO_AFRL_AFSEL7_0);
 80004b4:	4b29      	ldr	r3, [pc, #164]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	4a28      	ldr	r2, [pc, #160]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004ba:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80004be:	6213      	str	r3, [r2, #32]

	GPIOA->MODER &= ~GPIO_MODER_MODER6;
 80004c0:	4b26      	ldr	r3, [pc, #152]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a25      	ldr	r2, [pc, #148]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER6_1;
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a22      	ldr	r2, [pc, #136]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004d6:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED6;
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	4a1f      	ldr	r2, [pc, #124]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004e2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED6;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4a1c      	ldr	r2, [pc, #112]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004ea:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80004ee:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL6;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004f2:	6a1b      	ldr	r3, [r3, #32]
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80004fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (GPIO_AFRL_AFSEL6_2 | GPIO_AFRL_AFSEL6_0);
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <GPIO_LCD_Init+0xf4>)
 80004fe:	6a1b      	ldr	r3, [r3, #32]
 8000500:	4a16      	ldr	r2, [pc, #88]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000502:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 8000506:	6213      	str	r3, [r2, #32]

	GPIOA->MODER &= ~GPIO_MODER_MODER5;
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <GPIO_LCD_Init+0xf4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a13      	ldr	r2, [pc, #76]	; (800055c <GPIO_LCD_Init+0xf4>)
 800050e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000512:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5_1;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a10      	ldr	r2, [pc, #64]	; (800055c <GPIO_LCD_Init+0xf4>)
 800051a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800051e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED5;
 8000520:	4b0e      	ldr	r3, [pc, #56]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000526:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800052a:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED5;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <GPIO_LCD_Init+0xf4>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000532:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000536:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL5;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <GPIO_LCD_Init+0xf4>)
 800053a:	6a1b      	ldr	r3, [r3, #32]
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <GPIO_LCD_Init+0xf4>)
 800053e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000542:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (GPIO_AFRL_AFSEL5_2 | GPIO_AFRL_AFSEL5_0);
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <GPIO_LCD_Init+0xf4>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a04      	ldr	r2, [pc, #16]	; (800055c <GPIO_LCD_Init+0xf4>)
 800054a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800054e:	6213      	str	r3, [r2, #32]
//	GPIOB->BSRR |= GPIO_BSRR_BS11;
//	//RDx
//	GPIOB->CRH |= GPIO_CRH_MODE12;
//	GPIOB->CRH &= ~GPIO_CRH_CNF12;
//	GPIOB->BSRR |= GPIO_BSRR_BS12;
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000
 8000560:	40020400 	.word	0x40020400

08000564 <main>:
void RCC_Init(void);
void Systick_init(void);


int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	RCC_Init();
 8000568:	f7ff fe48 	bl	80001fc <RCC_Init>
	Systick_init();
 800056c:	f7ff ff3a 	bl	80003e4 <Systick_init>

	GPIO_LCD_Init();
 8000570:	f7ff ff7a 	bl	8000468 <GPIO_LCD_Init>
    /* Loop forever */
	for(;;);
 8000574:	e7fe      	b.n	8000574 <main+0x10>
	...

08000578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800057a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800057c:	f7ff fe2c 	bl	80001d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	; (80005b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <LoopForever+0xe>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	; (80005c4 <LoopForever+0x16>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005a6:	f000 f811 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005aa:	f7ff ffdb 	bl	8000564 <main>

080005ae <LoopForever>:

LoopForever:
  b LoopForever
 80005ae:	e7fe      	b.n	80005ae <LoopForever>
  ldr   r0, =_estack
 80005b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005bc:	08000634 	.word	0x08000634
  ldr r2, =_sbss
 80005c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005c4:	2000001c 	.word	0x2000001c

080005c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC_IRQHandler>
	...

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	4d0d      	ldr	r5, [pc, #52]	; (8000604 <__libc_init_array+0x38>)
 80005d0:	4c0d      	ldr	r4, [pc, #52]	; (8000608 <__libc_init_array+0x3c>)
 80005d2:	1b64      	subs	r4, r4, r5
 80005d4:	10a4      	asrs	r4, r4, #2
 80005d6:	2600      	movs	r6, #0
 80005d8:	42a6      	cmp	r6, r4
 80005da:	d109      	bne.n	80005f0 <__libc_init_array+0x24>
 80005dc:	4d0b      	ldr	r5, [pc, #44]	; (800060c <__libc_init_array+0x40>)
 80005de:	4c0c      	ldr	r4, [pc, #48]	; (8000610 <__libc_init_array+0x44>)
 80005e0:	f000 f818 	bl	8000614 <_init>
 80005e4:	1b64      	subs	r4, r4, r5
 80005e6:	10a4      	asrs	r4, r4, #2
 80005e8:	2600      	movs	r6, #0
 80005ea:	42a6      	cmp	r6, r4
 80005ec:	d105      	bne.n	80005fa <__libc_init_array+0x2e>
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f4:	4798      	blx	r3
 80005f6:	3601      	adds	r6, #1
 80005f8:	e7ee      	b.n	80005d8 <__libc_init_array+0xc>
 80005fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fe:	4798      	blx	r3
 8000600:	3601      	adds	r6, #1
 8000602:	e7f2      	b.n	80005ea <__libc_init_array+0x1e>
 8000604:	0800062c 	.word	0x0800062c
 8000608:	0800062c 	.word	0x0800062c
 800060c:	0800062c 	.word	0x0800062c
 8000610:	08000630 	.word	0x08000630

08000614 <_init>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr

08000620 <_fini>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr
